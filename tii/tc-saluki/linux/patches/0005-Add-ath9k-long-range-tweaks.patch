From bbe596653860a4c667e84654cb00d252e5e7a3f3 Mon Sep 17 00:00:00 2001
From: Mika Joenpera <mika.joenpera@unikie.com>
Date: Tue, 21 Feb 2023 09:24:46 +0200
Subject: [PATCH 3/3] Add ath9k long range tweaks

- dynamic rts/cts disable

Signed-off-by: Mika Joenpera <mika.joenpera@unikie.com>
---
 drivers/net/wireless/ath/ath.h         |  1 +
 drivers/net/wireless/ath/ath9k/debug.c | 47 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath9k/xmit.c  | 29 +++++++++++-----
 3 files changed, 69 insertions(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath.h b/drivers/net/wireless/ath/ath.h
index ab5f68394df2..e79eafbf75d5 100644
--- a/drivers/net/wireless/ath/ath.h
+++ b/drivers/net/wireless/ath/ath.h
@@ -150,6 +150,7 @@ struct ath_common {
 	enum ath_device_state state;
 	unsigned long op_flags;
 	u32 chan_bw;
+	u32 tii_mask;
 	struct ath_ani ani;
 
 	u16 cachelsz;
diff --git a/drivers/net/wireless/ath/ath9k/debug.c b/drivers/net/wireless/ath/ath9k/debug.c
index 2ba4d458cfc6..d672112d959b 100644
--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -1356,6 +1356,50 @@ void ath9k_get_et_stats(struct ieee80211_hw *hw,
 	WARN_ON(i != ATH9K_SSTATS_LEN);
 }
 
+static ssize_t read_file_tii_mask(struct file *file, char __user *user_buf,
+			     size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
+	char buf[32];
+	unsigned int len;
+
+	len = sprintf(buf, "0x%08x\n", common->tii_mask);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_file_tii_mask(struct file *file, const char __user *user_buf,
+			     size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
+	unsigned long rtscts;
+	char buf[32];
+	ssize_t len;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+
+	buf[len] = '\0';
+	if (kstrtoul(buf, 0, &rtscts))
+		return -EINVAL;
+
+	common->tii_mask = rtscts;
+	if (!test_bit(ATH_OP_INVALID, &common->op_flags))
+		ath9k_ops.config(sc->hw, IEEE80211_CONF_CHANGE_CHANNEL);
+
+	return count;
+}
+
+static const struct file_operations fops_tii_mask = {
+	.read = read_file_tii_mask,
+	.write = write_file_tii_mask,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t read_file_chan_bw(struct file *file, char __user *user_buf,
 			     size_t count, loff_t *ppos)
 {
@@ -1427,6 +1471,9 @@ int ath9k_init_debug(struct ath_hw *ah)
 	debugfs_create_file("chanbw", S_IRUSR | S_IWUSR, sc->debug.debugfs_phy,
 				    sc, &fops_chanbw);
 
+	debugfs_create_file("tii_mask", S_IRUSR | S_IWUSR, sc->debug.debugfs_phy,
+						sc, &fops_tii_mask);
+
 	debugfs_create_devm_seqfile(sc->dev, "dma", sc->debug.debugfs_phy,
 				    read_file_dma);
 	debugfs_create_devm_seqfile(sc->dev, "interrupt", sc->debug.debugfs_phy,
diff --git a/drivers/net/wireless/ath/ath9k/xmit.c b/drivers/net/wireless/ath/ath9k/xmit.c
index e60d4737fc6e..aec7a162a5a3 100644
--- a/drivers/net/wireless/ath/ath9k/xmit.c
+++ b/drivers/net/wireless/ath/ath9k/xmit.c
@@ -1245,12 +1245,15 @@ static void ath_buf_set_rate(struct ath_softc *sc, struct ath_buf *bf,
 				rts = true;
 		}
 
-		if (rts || rates[i].flags & IEEE80211_TX_RC_USE_RTS_CTS) {
-			info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
-			info->flags |= ATH9K_TXDESC_RTSENA;
-		} else if (rates[i].flags & IEEE80211_TX_RC_USE_CTS_PROTECT) {
-			info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
-			info->flags |= ATH9K_TXDESC_CTSENA;
+		if (common->tii_mask & 0x1) {
+		} else {
+			if (rts || rates[i].flags & IEEE80211_TX_RC_USE_RTS_CTS) {
+				info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
+				info->flags |= ATH9K_TXDESC_RTSENA;
+			} else if (rates[i].flags & IEEE80211_TX_RC_USE_CTS_PROTECT) {
+				info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
+				info->flags |= ATH9K_TXDESC_CTSENA;
+			}
 		}
 
 		if (rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
@@ -1258,9 +1261,19 @@ static void ath_buf_set_rate(struct ath_softc *sc, struct ath_buf *bf,
 		if (rates[i].flags & IEEE80211_TX_RC_SHORT_GI)
 			info->rates[i].RateFlags |= ATH9K_RATESERIES_HALFGI;
 
-		is_sgi = !!(rates[i].flags & IEEE80211_TX_RC_SHORT_GI);
+		if(common->tii_mask&0x4) {
+			is_sgi = false;
+			rates[i].flags &= ~IEEE80211_TX_RC_SHORT_GI;
+		} else { // old default
+			is_sgi = !!(rates[i].flags & IEEE80211_TX_RC_SHORT_GI);
+		}
 		is_40 = !!(rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH);
-		is_sp = !!(rates[i].flags & IEEE80211_TX_RC_USE_SHORT_PREAMBLE);
+		if(common->tii_mask&0x2) {
+			is_sp = false;
+			rates[i].flags &= ~IEEE80211_TX_RC_USE_SHORT_PREAMBLE;
+		} else { // old default
+			is_sp = !!(rates[i].flags & IEEE80211_TX_RC_USE_SHORT_PREAMBLE);
+		}
 
 		if (rates[i].flags & IEEE80211_TX_RC_MCS) {
 			/* MCS rates */
-- 
2.25.1

